{"version":3,"sources":["components/search-bar.js","components/video-detail.js","components/video-list-item.js","components/video-list.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","react_default","a","createElement","bloomer_min","value","onChange","handleChange","style","marginBottom","placeholder","VideoDetail","video","isSize","hasTextAlign","isLoading","ID","id","URL","concat","className","title","src","allowFullScreen","description","VideoListItem","onClick","onSelect","image","channel","VideoList","videoItens","videos","slice","map","video_list_item","key","thumbnails","medium","url","channelTitle","opts","maxResults","process","API_KEY","type","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","detail","text","timeout","onSearch","bind","assertThisInitialized","onLoad","busca","setState","YTSearch","results","console","log","event","_this2","target","clearTimeout","setTimeout","search_bar","video_detail","video_list","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3244ebd5.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Field,\n    Control,\n    Input\n} from 'bloomer';\n\nconst SearchBar = props => {\n    return (\n        <Field>\n            <Control>\n                <Input\n                    value={props.value}\n                    onChange={props.handleChange}\n                    style={{ marginBottom: 20  }}\n                    placeholder=\"Pesquisar\"\n                />\n            </Control>\n        </Field>\n    );\n};\n\nexport default SearchBar;","import React from 'react';\nimport {\n    Column,\n    Container,\n    Content,\n    Title,\n    Button\n} from 'bloomer';\n\nconst VideoDetail = props => {\n    if (!props.video) {\n        return (\n            <Column isSize=\"2/3\" hasTextAlign=\"centered\">\n                <Button isLoading />\n            </Column>\n        );\n    }\n\n    const ID = props.video.id;\n    const URL = `https://www.youtube.com/embed/${ID}?autoplay=1`;\n\n    return (\n        <Column isSize=\"2/3\">\n            <Container className=\"youtube-player\">\n                <iframe title=\"Youtube Frame\"src={URL} allowFullScreen/>\n            </Container>\n            <Content>\n                <Title>{props.video.title}</Title>\n                <p>{props.video.description}</p>\n            </Content>\n        </Column>\n    );\n}\n\nexport default VideoDetail;","import React from 'react';\nimport {\n    Media,\n    MediaContent,\n    MediaLeft,\n    Content,\n    Image\n} from 'bloomer';\n\nconst VideoListItem = props => {\n    return (\n        <Media className=\"video-list-item\" onClick={() => props.onSelect(props.video)}>\n            <MediaLeft>\n                <Image src={props.image} isSize=\"128x128\"/>\n            </MediaLeft>\n            <MediaContent>\n                <Content>\n                    <p><strong>{props.title}</strong>\n                    <br />\n                    <small>{props.channel}</small></p>\n                </Content>\n            </MediaContent>\n        </Media>\n    );\n}\n\nexport default VideoListItem;","import React from 'react';\nimport {\n    Column\n} from 'bloomer';\nimport VideoListItem from './video-list-item';\n\nconst VideoList = props => {\n    const videoItens = props.videos.slice(1).map(video => {\n        return <VideoListItem\n        key={video.id}\n        image={video.thumbnails.medium.url}\n        title={video.title}\n        channel={video.channelTitle}\n        onSelect={props.onSelect}\n        video={video}\n        />\n    });\n    return (\n        <Column>\n            {videoItens}                       \n        </Column>\n    );\n};\n\nexport default VideoList;","import React, { Component } from 'react';\nimport {\n  Section,\n  Container,\n  Columns\n} from 'bloomer';\nimport YTSearch from 'youtube-search';\n\nimport SearchBar from './components/search-bar';\nimport VideoDetail from './components/video-detail';\nimport VideoList from './components/video-list';\n\nconst API_KEY = process.env.API_KEY || 'AIzaSyC9tNDNQlfRh060r4H9bKvXPSSKOPRzo4M';\nconst opts = { maxResults: 6, key: API_KEY, type: 'video' };  \n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      videos: [],\n      detail: null,\n      text: ''\n    };\n    this.timeout = null;\n    this.onSearch = this.onSearch.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.onLoad(' ');\n  }\n\n  async onLoad(busca) {\n    await this.onSearch(busca);\n    this.setState({ detail: this.state.videos[0]});\n  }\n\n  async onSearch(busca) {\n    let videos = await YTSearch(busca, opts);\n    this.setState({\n        videos: videos.results\n      });\n    console.log(videos);\n  }\n\n  handleChange(event) {\n    this.setState({ text: event.target.value });\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n    this.timeout = setTimeout(() => { this.onLoad(this.state.text) }, 420);\n  }\n\n  onSelect(detail) {\n    console.log(detail);\n    this.setState({ detail });\n    this.onSearch(detail.title);\n  }\n\n  render() {\n    return (\n      <Section>\n        <Container>\n          <SearchBar value={this.state.text} handleChange={this.handleChange}/>\n          <Columns>\n            <VideoDetail video={this.state.detail}/>\n            <VideoList videos={this.state.videos} onSelect={this.onSelect}/>\n          </Columns>\n        </Container>\n      </Section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}