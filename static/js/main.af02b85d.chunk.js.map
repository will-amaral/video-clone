{"version":3,"sources":["components/search-bar.js","components/video-detail.js","components/video-list-item.js","components/video-list.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","_ref","onSearch","_useState","useState","_useState2","Object","slicedToArray","text","setText","react_default","a","createElement","bloomer_min","value","onChange","event","target","style","marginBottom","placeholder","VideoDetail","video","isSize","hasTextAlign","isLoading","url","concat","id","className","title","src","allow","allowFullScreen","description","VideoListItem","props","onClick","onSelect","image","channel","VideoList","videos","videoItens","slice","map","video_list_item","key","thumbnails","medium","channelTitle","opts","maxResults","process","type","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","detail","asyncToGenerator","regenerator_default","mark","_callee","busca","isSelected","data","wrap","_context","prev","next","YTSearch","sent","results","setState","stop","_x","_x2","apply","arguments","search_bar","video_detail","video_list","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af02b85d.chunk.js","sourcesContent":["// Para a nossa searchbar, além do react, importamos \n// o objeto useState que nos permite criar variáveis de \n// estado em componentes função. Variáveis de estado nativas\n// só são possíveis em componentes classe. \nimport React, { useState } from 'react';\nimport {\n    Field,\n    Control,\n    Input\n} from 'bloomer';\n\n// Na definição da função, já \"pegamos\" o props onSearch como variável\nfunction SearchBar({ onSearch }){\n    // A criação de variáveis de estado com \n    // useState nos devolve duas variáveis:\n    // o estado propriamente dito, e uma função para alterá-lo.\n    const [text, setText] = useState('');\n\n    // a função onChange vai mapear o valor do \n    // input e realizar uma nova busca a cada mudança\n    function handleChange(event) {\n        setText(event.target.value);\n        onSearch(text);\n    }\n\n    // No input, o valor é o definido no estado,\n    // o atributo onChange é específico do HTML. \n    // Para esse atributo passamos a nossa função.\n    // Adicionamos estilos adicionais para melhorar a visualização da barra. \n    return (\n        <Field>\n            <Control>\n                <Input\n                    value={text}\n                    onChange={handleChange}\n                    style={{ marginBottom: 20  }}\n                    placeholder=\"Pesquisar\"\n                />\n            </Control>\n        </Field>\n    );\n};\n\nexport default SearchBar;","import React from 'react';\nimport {\n    Column,\n    Container,\n    Content,\n    Title,\n    Button\n} from 'bloomer';\n\n// Recebemos o prop video que foi passado como prop diretamente. \nfunction VideoDetail({video}){\n    // Como a construção do componente é mais rápida que a chamda da API\n    // Colocamos um loader para ser renderizado, que será exibido enquanto\n    // o vídeo estiver vazio.\n    if (!video) {\n        return (\n            <Column isSize=\"2/3\" hasTextAlign=\"centered\">\n                <Button isLoading />\n            </Column>\n        );\n    }\n    // Após a chamada da API ter finalizado, podemos construir a url \n    // utilizando o identificador único do vídeo que foi passado como prop.\n    // Para melhorar a experiência, passamos o autoplay como parâmetro\n    const url = `https://www.youtube.com/embed/${video.id}?autoplay=1`;\n\n    return (\n        <Column isSize=\"2/3\">\n            <Container className=\"youtube-player\">\n                <iframe title=\"Youtube Frame\"src={url} allow='autoplay' allowFullScreen/>\n            </Container>\n            <Content>\n                <Title>{video.title}</Title>\n                <p>{video.description}</p>\n            </Content>\n        </Column>\n    );\n}\n\nexport default VideoDetail;","import React from 'react';\nimport {\n    Media,\n    MediaContent,\n    MediaLeft,\n    Content,\n    Image\n} from 'bloomer';\n\n// Como foram passados vários props para o componente, pegamos o objeto props inteiro. \nfunction VideoListItem(props){\n    // Criamos a função que será executada ao clicar no elemento.\n    function select() {\n        props.onSelect(props.video);\n    }\n\n    return (\n        <Media className=\"video-list-item\" onClick={select}>\n            <MediaLeft>\n                <Image src={props.image} isSize=\"128x128\"/>\n            </MediaLeft>\n            <MediaContent>\n                <Content>\n                    <p><strong>{props.title}</strong>\n                    <br />\n                    <small>{props.channel}</small></p>\n                </Content>\n            </MediaContent>\n        </Media>\n    );\n}\n\nexport default VideoListItem;","import React from 'react';\nimport {\n    Column\n} from 'bloomer';\n// Importamos o componente VideoListItem\nimport VideoListItem from './video-list-item';\n\n// Definimos o nosso componente, e resgatamos os dois props\n// que foram passados pelo componente pai (App). \nfunction VideoList({ videos, onSelect }) {\n    // A primeira coisa que definimos no componente é a variável\n    // videoItens, que recebe o props video(que é um array), e mapea o seu resultado, returnando\n    // um componente para cada item do array. Como o primeiro item da lista é \n    // utilizado como detalhe de video, pulamos esse item, e mapeamos apenas os restantes. \n    // Os props passados servirão para a construção do componente. \n    const videoItens = videos.slice(1).map(video => {\n        return <VideoListItem\n                    key={video.id}\n                    image={video.thumbnails.medium.url}\n                    title={video.title}\n                    channel={video.channelTitle}\n                    onSelect={onSelect}\n                    video={video}\n                />\n    });\n    // Renderizamos a constante em nossa coluna. O React automaticamente\n    // identifica arrays e listas e renderiza cada um como um componente separado, a partir\n    // de uma key de identificação única. \n    return (\n        <Column>\n            {videoItens}                       \n        </Column>\n    );\n};\n\nexport default VideoList;","// Aqui importamos os pacotes que foram instalados explicitamente\n// usando o Yarn add\nimport React, { Component } from 'react';\nimport {\n  Section,\n  Container,\n  Columns\n} from 'bloomer';\nimport YTSearch from 'youtube-search';\n// Para fins de organização, os componentes criados pelo usuário \n// ficam agrupados juntos\nimport SearchBar from './components/search-bar';\nimport VideoDetail from './components/video-detail';\nimport VideoList from './components/video-list';\n// A declaração das nossas variáveis. \n// Aqui precisamos de uma chave de API do \n// Youtube Data API v3. Para saber como gerar, siga\n// as instruções em: https://developers.google.com/youtube/v3/.\n// No caso do pacote youtube-search, nós precisamos configurar\n// as opções de busca, que é um ojbeto armazenado na constante\n//opts. Existem opções adicionais na documentação do pacote. \nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst opts = { maxResults: 6, key: API_KEY, type: 'video' };  \n\n// Aqui definimos o nosso componente principal. Nós refatoramos esse\n// componente para ser um componente de Classe. Diferente dos componentes\n// função, ele possui parâmetros e configurações separados.\nclass App extends Component {\n  // A primeira diferença é a existência de um construtor. \n  // Nesse construtor, recebemos as configurações do objeto Component, e \n  // podemos definir a execução de funções da classe. \n  constructor(props) {\n    super(props);\n    this.onSearch('');\n  }\n  // Assim como classes em outras linguagens, a Class do JavaScript pode\n  // possuir propriedades e métodos. A principal diferença é que a declaração\n  // de propriedades não necessita de palavras reservadas para a criação de \n  // variáveis, como var, const ou let. Declaramos ela diretamente. \n  // Aqui declaramos a propriedade state, que vai mapear o estado da \n  // aplicação. Dentro dela, temos um Array vazio, e uma variável nula. \n  state = {\n    videos: [],\n    detail: null\n  };\n  \n  // O primeiro método da nossa Classe App é uma função de busca, que utiliza a API\n  // do Youtube para resgatar uma lista de vídeos com base em uma string. \n  // Uma boa prática para trabalhar com apis é utilizá-las de forma assíncrona,\n  // por isso utilizamos a palavra reservada async antes da função. \n  // Aqui utilizamos uma arrow function devido a utilização da palavra this, que tem \n  // escopo diferente em funções regulares. \n  onSearch = async (busca, isSelected) => {\n    // Recebemos os dados da API e armazenamos na variável videos\n    let data = await YTSearch(busca, opts);\n    let videos = data.results;\n    // Passamos os dados da variável para o estado da aplicação. \n    // Sempre que o estado muda, no React, a aplicação re-renderiza os componentes\n    // que o utilizam. \n    this.setState({ videos });\n    // Se o vídeo não tiver sido escolhido diretamente como opção,\n    // no caso da primeira busca, ou de buscas na barra de pesquisa, \n    // colocamos o primeiro resultado como detalhe do vídeo. \n    if (!isSelected)\n      this.setState({ detail: videos[0] });\n  }\n  // O segundo método serve para podermos selecionar o vídeo a ser\n  // exibido. Para emular o comportamento de \"vídeos relacionados\",\n  // Realizamos uma nova busca, passando o título do vídeo como \n  // pesquisa, e o parâmetro true para vídeo selecionado. \n  onSelect = detail => {\n    this.setState({ detail });\n    this.onSearch(detail.title, true);\n  }\n  // Renderizamos os componentes, selecionados, utilizando os componentes de \n  // estilo do bulma. \n  // Os componentes SearchBar, VideoDetail e VideoList recebem props específicos. \n  render() {\n    return (\n      <Section>\n        <Container>\n          <SearchBar onSearch={this.onSearch}/>\n          <Columns>\n            <VideoDetail video={this.state.detail}/>\n            <VideoList videos={this.state.videos} onSelect={this.onSelect}/>\n          </Columns>\n        </Container>\n      </Section>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}